<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="utf-8">
  <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport'/>
  <meta name="viewport" content="width=device-width"/>

  <title>Reset Password</title>
  <link rel="stylesheet" href="/stylesheets/style.css">
</head>
<body>
<div class="flex-center position-ref full-height">
  <div class="content">
    <form id="auth" action="" method="post" class="flex-center flex-direction-column">
      <h1>Reset Password</h1>
      <div>
        <input id="email" type="email" name="email" placeholder="email" pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}">
        <button id="getCode" type="button">Get Code</button>
      </div>
      <input id="code" type="text" name="code" placeholder="check code">
      <input id="password" type="password" name="password" placeholder="password" pattern="(.{6,})">
      <input id="passwordVerification" type="password" name="password_verification" placeholder="check password" pattern="(.{6,})">

      <button id="submit" type="submit">Reset</button>
    </form>
    <div id="message"></div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsSHA/2.0.2/sha.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function (){
    window.axios = axios;
    window.axios.defaults.headers.common = {
      'X-Requested-With': 'XMLHttpRequest',
    };
    document.querySelector('#submit').addEventListener('click', function(e) {
      e.preventDefault();
      const params = {
        email: document.querySelector('#email').value,
        password: document.querySelector('#password').value,
        code: document.querySelector('#code').value,
        passwordVerification: document.querySelector('#passwordVerification').value,
      }
      if (isValidated(params)) {
        resetPassword(params);
      }
      clearField(params);
    })
    document.querySelector('#getCode').addEventListener('click', getSecretCode);
  });

  const isValidated = (params) => {
    const isEmailValidated = RegExp(<%= email_regex %>).test(params.email);
    const isPasswordValidated = RegExp(<%= password_regex %>).test(params.password);
    const isPasswordCheckPassed = params.passwordVerification === params.password;

    if (!isPasswordCheckPassed) setMessage('<%= password_does_not_match_alert %>');
    if (!isPasswordValidated) setMessage('<%= password_alert %>');
    if (!isEmailValidated) setMessage('<%= email_alert %>');

    return isPasswordValidated && isPasswordValidated && isPasswordCheckPassed;
  }

  const resetPassword = params => {
    const sendData = {
      email: params.email,
      password: passwordHashing(params.password),
      code: params.code,
    };
    axios.post('/auth/reset/password', sendData)
      .then(res => {
        const result = res.data;
        if (!!result.error) {
          alert('Password reset failed');
          return false;
        }
        alert('Password reset successfully');
        return res;
      })
      .catch(err => {
        console.error(err);
      });
  }

  const passwordHashing = password => {
    const objHash = new jsSHA("SHA-512", "TEXT", {numRounds: 1});
    objHash.update(password);

    return objHash.getHash("HEX");
  }

  const clearField = params => {
    document.querySelector('#password').value = '';
    document.querySelector('#passwordVerification').value = '';
    document.querySelector('#code').value = '';
  }

  const setMessage = message => {
    document.querySelector('#message').innerText = message;
  }

  const getSecretCode = () => {
    axios.post('/auth/reset/code')
      .then(response => {
        console.log('success:');
        console.log(response.data);
        alert('send email');
        return response;
      })
      .catch(err => {
        console.log(err);
        console.log(Error(err.response.data.message));
      });
  };
</script>
</body>
</html>
